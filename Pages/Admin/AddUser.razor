@using AttendanceApplication.Services
@page "/admin/adduser"
@attribute [Authorize(Roles = "Admin")]
@inject UserManagementService UserService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<h3>Add User</h3>

<EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="newUser.Username" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="newUser.Email" />
    </div>
    <div class="form-group">
        <label>Display Name</label>
        <InputText class="form-control" @bind-Value="newUser.DisplayName" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" type="password" @bind-Value="newUser.Password" />
    </div>
    <div class="form-group">
        <label>Role</label>
        <InputSelect class="form-control" @bind-Value="newUser.Role">
            <option value="Teacher">Teacher</option>
            <option value="Student">Student</option>
        </InputSelect>
    </div>
    @if (newUser.Role == "Student")
    {
        <div class="form-group">
            <label>Student ID</label>
            <InputText class="form-control" @bind-Value="newUser.StudentId" />
        </div>
    }
    <button type="submit" class="btn btn-primary">Add User</button>
</EditForm>

@code {
    private NewUserModel newUser = new();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Reset error message
        var result = await UserService.CreateUserAsync(
            newUser.Username, newUser.Email, newUser.DisplayName, newUser.Password,
            newUser.Role, newUser.Role == "Student" ? newUser.StudentId : null);

        if (result.Succeeded)
        {
            Navigation.NavigateTo("/admin/dashboard");
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    public class NewUserModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Display Name is required.")]
        public string DisplayName { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Role is required.")]
        public string Role { get; set; } = "Teacher";

        [CustomValidation(typeof(NewUserModel), nameof(ValidateStudentId))]
        public string? StudentId { get; set; }

        public static ValidationResult ValidateStudentId(string studentId, ValidationContext context)
        {
            var instance = (NewUserModel)context.ObjectInstance;
            if (instance.Role == "Student" && string.IsNullOrEmpty(studentId))
            {
                return new ValidationResult("Student ID is required for students.");
            }
            return ValidationResult.Success;
        }
    }
}